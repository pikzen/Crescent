Texture2D shaderTex;
SamplerState sampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

// Pixel Shader
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	textureColor = shaderTex.Sample(sampleType, input.tex);

	color = ambientColor;

	// Invert the light drection
	lightDir = -lightDirection;

	lightIntensity = saturate (dot(input.normal, lightDir));

	// Check if there is at least some light coming from the diffuse light
	// If not, there'll just be the ambient light color;
	if (lightIntensity > 0.0f)
	{
		// Add the diffuse color to the ambient color
		color += (diffuseColor * lightIntensity);
	}

	color = saturate(color);

	color = color * textureColor;

	return color;




}